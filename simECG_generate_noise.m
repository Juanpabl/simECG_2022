function [multileadNoise] = simECG_generate_noise(ecgLength, noiseType, noiseRMS, simECGdata, multileadVA)
% [] = simECG_generate_noise() returns several sources of 15-lead noise
% depending on user input:
% 
% Noise type:
% 0 - No noise added (noise RMS = 0 mV)
% 1 - Motion artefacts
% 2 - Electrode movement
% 3 - Baseline wander
% 4 - Mixture of noises
% 5 - Bw + ma because em has residual ECG;
% 6 - Simulated muscular noise %CPerez 07/2022
% 7 - Real exercise stress test noise (from R. Bailón)
% 8 - Motion artifacts
% 
% Noise types 1 to 5 are obtained from the MIT-BIH Noise Stress Test
% Database. The signals of the the MIT–BIH Noise Stress Test database is
% used as a noise source for orthogonal leads X and Y, whereas noise for
% lead Z is obtained as the sum of squares of these two noises of leads X
% and Y. Then, an inverse of Dowers’s transformation matrix is applied to
% generate noise in the remaining 12 ECG leads. Ultimately, the noise is
% rescaled to the desired RMS value. Noise type 6 is simulated muscular
% noise generated with a nonstationaty autoregressive model. Noise type 7
% is real excercise stress test (muscular noise). Noise type 8 is simulated
% motion artifact generated by a Bernoulli-Gaussian process.
% 
% Input arguments:
% ecgLength - length of ECG signal, in samples.
% noiseType - an array containing the desired types of noise (eg [3, 6,
% 8]).
% noiseRms - the desired root mean square level of each desired noise type.
% simECGdata - struct of ECG simulation parameters defined in the main
% script.
% multileadVA - simulated multilead ventricular activity.
% 
% Output arguments:
% multileadNoise - 15-lead matrix of the selected noise sources.
% 
% Licensed under GNU General Public License version 3:
% https://www.gnu.org/licenses/gpl-3.0.html

disp('Generating noise ...');

noiseLength = 1805556; % Noise length
if ecgLength < noiseLength
    noiseStart = randi([1 (noiseLength-ecgLength)]); % take starting point randomly
else
    noiseStart = randi([1 noiseLength/2]); %1805556 - cut half of length noise segments
    cycles = ceil(ecgLength/(noiseLength/2));
    noiseTemp = [];
end

switch noiseType
    case 0     % no noise added
        multileadNoise = zeros(15, ecgLength);
    case 1     % motion artefacts
        data = load('DATA_noises_real');
        if ecgLength < noiseLength
            multileadNoise = data.motion_artefacts(:, noiseStart+1:noiseStart+ecgLength);
        else
            multileadNoise = data.motion_artefacts(:, noiseStart+1:noiseStart+(noiseLength/2));
            for i = 1:cycles
                noiseTemp = [noiseTemp multileadNoise];
            end
            multileadNoise = noiseTemp(:,1:ecgLength);
        end
        
    case 2     % electrode movement
        data = load('DATA_noises_real');
        if ecgLength < noiseLength
            multileadNoise = data.electrode_movement(:, noiseStart+1:noiseStart+ecgLength);
        else
            multileadNoise = data.electrode_movement(:, noiseStart+1:noiseStart+(noiseLength/2));
            for i = 1:cycles
                noiseTemp = [noiseTemp multileadNoise];
            end
            multileadNoise = noiseTemp(:,1:ecgLength);
        end
        
    case 3     % baseline wander
        data = load('DATA_noises_real');
        if ecgLength < noiseLength
            multileadNoise = data.baseline_wander(:, noiseStart+1:noiseStart+ecgLength);
        else
            multileadNoise = data.baseline_wander(:, noiseStart+1:noiseStart+(noiseLength/2));
            for i = 1:cycles
                noiseTemp = [noiseTemp multileadNoise];
            end
            multileadNoise = noiseTemp(:,1:ecgLength);
        end
        
    case 4     % mixture of noises
        data = load('DATA_noises_real');
        if ecgLength < noiseLength
            multileadNoise = data.mixture_of_noises(:, noiseStart+1:noiseStart+ecgLength);
        else
            multileadNoise = data.mixture_of_noises(:, noiseStart+1:noiseStart+(noiseLength/2));
            for i = 1:cycles
                noiseTemp = [noiseTemp multileadNoise];
            end
            multileadNoise = noiseTemp(:,1:ecgLength);
        end
        
    case 5     % baseline wander and motion artefacts because electrode motion has resudual ECG 10/02/2021 Alba
        data = load('DATA_noises_real');
        if ecgLength < noiseLength
            multileadNoise = data.baseline_wander(:, noiseStart+1:noiseStart+ecgLength) + data.motion_artefacts(:, noiseStart+1:noiseStart+ecgLength);
        else
            multileadNoise = data.baseline_wander(:, noiseStart+1:noiseStart+(noiseLength/2)) + data.motion_artefacts(:, noiseStart+1:noiseStart+(noiseLength/2));
            for i = 1:cycles
                noiseTemp = [noiseTemp multileadNoise];
            end
            multileadNoise = noiseTemp(:,1:ecgLength);
        end
        
    case 6     %Simulated Muscular Noise
        multileadNoise = simECG_generate_muscular_noise_L9(ecgLength, simECGdata, noiseRMS, multileadVA([7:12,1:3],:));%in mVolts
        
    case 7     %Real Exercise stress test noise (from R. Bailón)
        multileadNoise = simECG_noise_real_EST(ecgLength, simECGdata, noiseRMS, multileadVA([7:12,1:3],:));
        
    case 8     %Motion artifacts
        multileadNoise = simECG_generate_motion_artifact(ecgLength, simECGdata, noiseRMS);%in mVolts
end

if noiseType > 0 && (noiseType ~=6 && noiseType ~=7 && noiseType ~=8)
    % Adjust to desired noise RMS value
    for i = 1:15
        multileadNoise(i,:) = noiseRMS*(multileadNoise(i,:)/std(multileadNoise(i,:)));
    end
    
end
end
